import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;


public class SenateBusProblem {


    private int simulationSpeed = 1;             //increase this to fast forward the simulation.1 is normal speed.
    private int ridersWaiting = 0;                 //count of riders in the boarding area
    private Semaphore mutex = new Semaphore(1);     //to protect waiting riders
    private Semaphore bus = new Semaphore(0);       //to signal arrival of a bus
    private Semaphore boarded = new Semaphore(0);   // to signal a rider has been boarded

    class Bus implements Runnable {

        int myId;

        public Bus(int id){
            this.myId = id;
        }


        @Override
        public void run() {
            int riders_to_board = 0;
            try {
                mutex.acquire();                            //bus holds the mutex till the riders get boarded
                System.out.println("Bus " + myId + " arrived at the bus stop");
                try {
                    riders_to_board = Math.min(ridersWaiting, 50);
                    System.out.println("Bus " + myId + " sees " + ridersWaiting + " riders waiting");

                    for (int i = 0; i < riders_to_board; i++) {
                        bus.release();
                        boarded.acquire();                  //wait till each rider is baorded
                    }
                    ridersWaiting = Math.max(ridersWaiting - 50, 0);
                } finally {
                    mutex.release();                        //release the mutex 
                }
            } catch (InterruptedException e) {
                Logger.getLogger(SenateBusProblem.class.getName()).log(Level.SEVERE, null, "Bus " + myId + " thread got interrupted");
            }
            System.out.println("Bus " + myId + " departed with " + riders_to_board + " passengers");
        }
    }

    class Rider implements Runnable {

        int myId;

        public Rider(int id){
            this.myId = id;
        }

        @Override
        public void run() {
            try {
                mutex.acquire();
                try {
                    ridersWaiting++;
                } finally {
                    mutex.release();                        //release the mutex
                }

                bus.acquire();
                System.out.println("Rider "+ myId +" got boarded");
                boarded.release();

            } catch (InterruptedException e) {
                Logger.getLogger(SenateBusProblem.class.getName()).log(Level.SEVERE, null, "Rider " + myId + " thread got interrupted");
            }

        }
    }

    class RideCreator implements Runnable{

        int riderId=0;
        int meanTime=(30000/simulationSpeed); //mean time of random distribution = 30sec

        @Override
        public void run(){
            while(true){
                try {
                    riderId++;
                    Rider newRider = new Rider(riderId);
                    new Thread(newRider).start();
                    System.out.println("Rider "+ riderId +" arrived at the bus stop");
                    int randTime = SenateBusProblem.getRandomNumber(meanTime);
                    Thread.sleep(randTime);//sleep for random time interval
                } catch (InterruptedException ex) {
                    Logger.getLogger(SenateBusProblem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    class BusCreator implements Runnable{

        int busId=0;
        int meanTime=(1200000/simulationSpeed); //mean time of random distribution = 20min

        @Override
        public void run(){
            while(true){
                try {
                    int randTime = SenateBusProblem.getRandomNumber(meanTime);
                    Thread.sleep(randTime);//sleep for random time interval
                    busId++;
                    Bus newBus = new Bus(busId);
                    new Thread(newBus).start();
                } catch (InterruptedException ex) {
                    Logger.getLogger(SenateBusProblem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private static int getRandomNumber(int distributionMean){

        /*
        random number exponentially distributed with the given distributionMean 
        is generated using the function  x = log(1-u)/(−λ). Mean of the distribution
        generated by this fuction is 1/λ. Therefore 1/distributionMean is set as λ.
        */
        double lambda = Math.pow(distributionMean,-1);
        double currRand = ThreadLocalRandom.current().nextDouble(0, 1);
        int randTime = (int)(Math.log(1-currRand)/(-1*lambda));
        return randTime;
        
    }


    public static void main(String[] args) {
        SenateBusProblem simulation = new SenateBusProblem();
        //this thread will spawn Bus threads at random intervals
        new Thread(simulation.new BusCreator()).start();
        //this thread will spawn Rider threads at random intervals
        new Thread(simulation.new RideCreator()).start();
    }



}
